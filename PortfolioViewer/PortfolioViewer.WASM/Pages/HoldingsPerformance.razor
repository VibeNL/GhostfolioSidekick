@page "/holdings-performance"
@using GhostfolioSidekick.Database
@using GhostfolioSidekick.Model.Activities
@using GhostfolioSidekick.Model.Activities.Types
@using GhostfolioSidekick.Model.Market
@using Microsoft.EntityFrameworkCore
@inject DatabaseContext DbContext

<PageTitle>Holdings Performance</PageTitle>

<h1>Holdings Performance</h1>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Holdings Overview</h5>
                    <div>
                        <label for="assetClassFilter" class="form-label me-2">Filter by Asset Class:</label>
                        <select id="assetClassFilter" @bind="selectedAssetClass" class="form-select" style="width: auto; display: inline-block;">
                            <option value="">All Asset Classes</option>
                            @if (AssetClasses != null)
                            {
                                @foreach (var assetClass in AssetClasses)
                                {
                                    <option value="@assetClass">@assetClass</option>
                                }
                            }
                        </select>
                        <button class="btn btn-primary ms-2" @onclick="FilterHoldings">Filter</button>
                    </div>
                </div>
                <div class="card-body">
                    @if (FilteredHoldings != null)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Symbol</th>
                                        <th>Name</th>
                                        <th>Asset Class</th>
                                        <th>Data Source</th>
                                        <th>Activities</th>
                                        <th>Market Data Points</th>
                                        <th>Latest Price</th>
                                        <th>Price Date</th>
                                        <th>Total Quantity</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var holding in FilteredHoldings)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@holding.Symbol</strong>
                                                @if (!string.IsNullOrEmpty(holding.ISIN))
                                                {
                                                    <br><small class="text-muted">@holding.ISIN</small>
                                                }
                                            </td>
                                            <td>@holding.Name</td>
                                            <td>
                                                <span class="badge @GetAssetClassBadge(holding.AssetClass)">
                                                    @holding.AssetClass
                                                </span>
                                                @if (!string.IsNullOrEmpty(holding.AssetSubClass))
                                                {
                                                    <br><small class="text-muted">@holding.AssetSubClass</small>
                                                }
                                            </td>
                                            <td>@holding.DataSource</td>
                                            <td>
                                                <span class="badge bg-info">@holding.ActivityCount</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@holding.MarketDataCount</span>
                                            </td>
                                            <td>
                                                @if (holding.LatestPrice != null)
                                                {
                                                    <span class="fw-bold">@holding.LatestPrice</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                @if (holding.LatestPriceDate.HasValue)
                                                {
                                                    <small>@holding.LatestPriceDate.Value.ToString("MM/dd/yyyy")</small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span>
                                                }
                                            </td>
                                            <td>
                                                @if (holding.TotalQuantity != 0)
                                                {
                                                    <span class="@(holding.TotalQuantity > 0 ? "text-success" : "text-danger")">
                                                        @holding.TotalQuantity.ToString("N4")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">0</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Asset Class Distribution</h5>
                </div>
                <div class="card-body">
                    @if (AssetClassDistribution != null)
                    {
                        @foreach (var item in AssetClassDistribution)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <span>@item.AssetClass</span>
                                    <span>@item.Count holdings</span>
                                </div>
                                <div class="progress">
                                    <div class="progress-bar @GetAssetClassProgressBar(item.AssetClass)" 
                                         role="progressbar" 
                                         style="width: @item.Percentage%"
                                         aria-valuenow="@item.Percentage" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @item.Percentage.ToString("N1")%
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Most Active Holdings</h5>
                </div>
                <div class="card-body">
                    @if (MostActiveHoldings != null)
                    {
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Symbol</th>
                                    <th>Activities</th>
                                    <th>Latest Activity</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var holding in MostActiveHoldings)
                                {
                                    <tr>
                                        <td>@holding.Symbol</td>
                                        <td><span class="badge bg-primary">@holding.ActivityCount</span></td>
                                        <td><small>@holding.LatestActivityDate?.ToString("MM/dd/yyyy")</small></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (SelectedHoldingDetails != null)
    {
        <div class="row mt-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Holding Details: @SelectedHoldingDetails.Symbol</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Recent Activities</h6>
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Type</th>
                                            <th>Quantity</th>
                                            <th>Price</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var activity in SelectedHoldingDetails.RecentActivities)
                                        {
                                            <tr>
                                                <td><small>@activity.Date.ToString("MM/dd/yyyy")</small></td>
                                                <td>@activity.Type</td>
                                                <td>@activity.Quantity</td>
                                                <td>@activity.Price</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h6>Market Data</h6>
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Close</th>
                                            <th>High</th>
                                            <th>Low</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var marketData in SelectedHoldingDetails.RecentMarketData)
                                        {
                                            <tr>
                                                <td><small>@marketData.Date.ToString("MM/dd/yyyy")</small></td>
                                                <td>@marketData.Close</td>
                                                <td>@marketData.High</td>
                                                <td>@marketData.Low</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private bool isLoading = true;
    private string selectedAssetClass = "";
    private List<HoldingPerformanceData>? AllHoldings;
    private List<HoldingPerformanceData>? FilteredHoldings;
    private List<string>? AssetClasses;
    private List<AssetClassDistributionItem>? AssetClassDistribution;
    private List<ActiveHoldingItem>? MostActiveHoldings;
    private HoldingDetailsData? SelectedHoldingDetails;

    protected override async Task OnInitializedAsync()
    {
        await LoadHoldingsData();
        isLoading = false;
    }

    private async Task LoadHoldingsData()
    {
        var holdings = await DbContext.Holdings
            .Include(h => h.SymbolProfiles)
                .ThenInclude(sp => sp.MarketData)
            .Include(h => h.Activities)
            .ToListAsync();

        AllHoldings = new List<HoldingPerformanceData>();

        foreach (var holding in holdings.Where(h => h.SymbolProfiles.Any()))
        {
            var symbolProfile = holding.SymbolProfiles.First();
            
            // Get the latest market data from the navigation property
            var marketData = symbolProfile.MarketData
                .OrderByDescending(md => md.Date)
                .FirstOrDefault();

            // Calculate total quantity from activities
            var quantityActivities = holding.Activities.OfType<ActivityWithQuantityAndUnitPrice>();
            var totalQuantity = quantityActivities.Sum(a => a.Quantity);

            AllHoldings.Add(new HoldingPerformanceData
            {
                Symbol = symbolProfile.Symbol,
                Name = symbolProfile.Name ?? "Unknown",
                AssetClass = symbolProfile.AssetClass.ToString(),
                AssetSubClass = symbolProfile.AssetSubClass?.ToString(),
                DataSource = symbolProfile.DataSource,
                ISIN = symbolProfile.ISIN,
                ActivityCount = holding.Activities.Count,
                MarketDataCount = symbolProfile.MarketData.Count,
                LatestPrice = marketData?.Close.ToString(),
                LatestPriceDate = marketData?.Date,
                TotalQuantity = totalQuantity
            });
        }

        AssetClasses = AllHoldings.Select(h => h.AssetClass).Distinct().OrderBy(ac => ac).ToList();
        FilteredHoldings = AllHoldings.OrderBy(h => h.Symbol).ToList();

        // Calculate asset class distribution
        AssetClassDistribution = AllHoldings
            .GroupBy(h => h.AssetClass)
            .Select(g => new AssetClassDistributionItem
            {
                AssetClass = g.Key,
                Count = g.Count(),
                Percentage = (double)g.Count() / AllHoldings.Count * 100
            })
            .OrderByDescending(item => item.Count)
            .ToList();

        // Get most active holdings
        MostActiveHoldings = AllHoldings
            .Where(h => h.ActivityCount > 0)
            .OrderByDescending(h => h.ActivityCount)
            .Take(10)
            .Select(h => new ActiveHoldingItem
            {
                Symbol = h.Symbol,
                ActivityCount = h.ActivityCount,
                LatestActivityDate = holdings.First(hld => hld.SymbolProfiles.Any(sp => sp.Symbol == h.Symbol))
                    .Activities.Max(a => a.Date)
            })
            .ToList();
    }

    private async Task FilterHoldings()
    {
        if (string.IsNullOrEmpty(selectedAssetClass))
        {
            FilteredHoldings = AllHoldings?.OrderBy(h => h.Symbol).ToList();
        }
        else
        {
            FilteredHoldings = AllHoldings?
                .Where(h => h.AssetClass == selectedAssetClass)
                .OrderBy(h => h.Symbol)
                .ToList();
        }
        StateHasChanged();
    }

    private string GetAssetClassBadge(string assetClass)
    {
        return assetClass.ToLower() switch
        {
            "equity" => "bg-success",
            "cryptocurrency" => "bg-warning text-dark",
            "cash" => "bg-info",
            "commodity" => "bg-secondary",
            "fixedincome" => "bg-primary",
            _ => "bg-light text-dark"
        };
    }

    private string GetAssetClassProgressBar(string assetClass)
    {
        return assetClass.ToLower() switch
        {
            "equity" => "bg-success",
            "cryptocurrency" => "bg-warning",
            "cash" => "bg-info",
            "commodity" => "bg-secondary",
            "fixedincome" => "bg-primary",
            _ => "bg-light"
        };
    }

    private class HoldingPerformanceData
    {
        public string Symbol { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string AssetClass { get; set; } = string.Empty;
        public string? AssetSubClass { get; set; }
        public string DataSource { get; set; } = string.Empty;
        public string? ISIN { get; set; }
        public int ActivityCount { get; set; }
        public int MarketDataCount { get; set; }
        public string? LatestPrice { get; set; }
        public DateOnly? LatestPriceDate { get; set; }
        public decimal TotalQuantity { get; set; }
    }

    private class AssetClassDistributionItem
    {
        public string AssetClass { get; set; } = string.Empty;
        public int Count { get; set; }
        public double Percentage { get; set; }
    }

    private class ActiveHoldingItem
    {
        public string Symbol { get; set; } = string.Empty;
        public int ActivityCount { get; set; }
        public DateTime? LatestActivityDate { get; set; }
    }

    private class HoldingDetailsData
    {
        public string Symbol { get; set; } = string.Empty;
        public List<ActivityItem> RecentActivities { get; set; } = [];
        public List<MarketDataItem> RecentMarketData { get; set; } = [];
    }

    private class ActivityItem
    {
        public DateTime Date { get; set; }
        public string Type { get; set; } = string.Empty;
        public string Quantity { get; set; } = string.Empty;
        public string Price { get; set; } = string.Empty;
    }

    private class MarketDataItem
    {
        public DateOnly Date { get; set; }
        public string Close { get; set; } = string.Empty;
        public string High { get; set; } = string.Empty;
        public string Low { get; set; } = string.Empty;
    }
}