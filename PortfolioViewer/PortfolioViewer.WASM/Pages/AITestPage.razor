@page "/ai-test"
@using Microsoft.Extensions.AI
@using GhostfolioSidekick.PortfolioViewer.WASM.AI
@inject IWebChatClient WebChatClient
@inject ILogger<AITestPage> Logger

<PageTitle>AI Fallback Test</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>AI Fallback Test</h1>
            <p class="text-muted">This page demonstrates the WebLLM to Wllama fallback functionality.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Initialization Status</h5>
                </div>
                <div class="card-body">
                    @if (!isInitialized)
                    {
                        <button class="btn btn-primary" @onclick="InitializeAI" disabled="@isInitializing">
                            @if (isInitializing)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Initializing...</span>
                            }
                            else
                            {
                                <span>Initialize AI</span>
                            }
                        </button>
                        
                        @if (!string.IsNullOrEmpty(initializationStatus))
                        {
                            <div class="mt-3">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @(initializationProgress)%" 
                                         aria-valuenow="@initializationProgress" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                                <small class="text-muted mt-1 d-block">@initializationStatus</small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-success">
                            <i class="bi bi-check-circle me-2"></i>
                            AI client initialized successfully using <strong>@clientType</strong>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Test Chat</h5>
                </div>
                <div class="card-body">
                    @if (isInitialized)
                    {
                        <div class="mb-3">
                            <input type="text" class="form-control" @bind="testMessage" 
                                   placeholder="Enter a test message..." @onkeypress="HandleKeyPress" />
                        </div>
                        <button class="btn btn-success" @onclick="SendTestMessage" disabled="@isSending">
                            @if (isSending)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Sending...</span>
                            }
                            else
                            {
                                <span>Send Message</span>
                            }
                        </button>
                    }
                    else
                    {
                        <p class="text-muted">Initialize the AI client first to test chat functionality.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (chatMessages.Any())
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Chat History</h5>
                        <button class="btn btn-sm btn-outline-secondary float-end" @onclick="ClearChat">
                            Clear
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="chat-container" style="max-height: 400px; overflow-y: auto;">
                            @foreach (var message in chatMessages)
                            {
                                <div class="message mb-3">
                                    <div class="d-flex">
                                        <div class="flex-shrink-0">
                                            @if (message.Role == ChatRole.User)
                                            {
                                                <span class="badge bg-primary">User</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">AI</span>
                                            }
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <div class="message-content">
                                                @((MarkupString)message.Text?.Replace("\n", "<br>"))
                                            </div>
                                            <small class="text-muted">@message.Timestamp.ToString("HH:mm:ss")</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isInitialized = false;
    private bool isInitializing = false;
    private bool isSending = false;
    private string initializationStatus = "";
    private int initializationProgress = 0;
    private string clientType = "";
    private string testMessage = "";
    private List<ChatMessageWithTimestamp> chatMessages = new();

    protected override async Task OnInitializedAsync()
    {
        // Try to determine client type if already initialized
        if (WebChatClient is FallbackChatClient fallbackClient)
        {
            // This is a simplified check - in reality you'd need to expose this information
            clientType = "Fallback Client";
        }
    }

    private async Task InitializeAI()
    {
        isInitializing = true;
        initializationStatus = "Starting initialization...";
        initializationProgress = 0;
        StateHasChanged();

        try
        {
            var progress = new Progress<InitializeProgress>(report =>
            {
                initializationStatus = report.Message;
                initializationProgress = (int)(report.Progress * 100);
                InvokeAsync(StateHasChanged);
            });

            await WebChatClient.InitializeAsync(progress);
            
            isInitialized = true;
            initializationStatus = "Initialization completed successfully";
            initializationProgress = 100;
            
            // Determine which client is being used
            clientType = WebChatClient.GetType().Name switch
            {
                "WebLLMChatClient" => "WebLLM",
                "WllamaChatClient" => "Wllama",
                "FallbackChatClient" => "Fallback (WebLLM/Wllama)",
                _ => "Unknown"
            };

            Logger.LogInformation("AI client initialized successfully using {ClientType}", clientType);
        }
        catch (Exception ex)
        {
            initializationStatus = $"Initialization failed: {ex.Message}";
            Logger.LogError(ex, "Failed to initialize AI client");
        }
        finally
        {
            isInitializing = false;
            StateHasChanged();
        }
    }

    private async Task SendTestMessage()
    {
        if (string.IsNullOrWhiteSpace(testMessage) || !isInitialized)
            return;

        isSending = true;
        var userMessage = testMessage;
        testMessage = "";

        // Add user message to chat
        chatMessages.Add(new ChatMessageWithTimestamp
        {
            Role = ChatRole.User,
            Text = userMessage,
            Timestamp = DateTime.Now
        });

        StateHasChanged();

        try
        {
            var messages = new List<ChatMessage>
            {
                new(ChatRole.System, "You are a helpful AI assistant. Keep responses concise and friendly."),
                new(ChatRole.User, userMessage)
            };

            var responseText = "";
            var aiMessage = new ChatMessageWithTimestamp
            {
                Role = ChatRole.Assistant,
                Text = "",
                Timestamp = DateTime.Now
            };
            
            chatMessages.Add(aiMessage);

            await foreach (var response in WebChatClient.GetStreamingResponseAsync(messages))
            {
                responseText += response.Text;
                aiMessage.Text = responseText;
                StateHasChanged();
            }

            Logger.LogInformation("Chat message processed successfully");
        }
        catch (Exception ex)
        {
            chatMessages.Add(new ChatMessageWithTimestamp
            {
                Role = ChatRole.Assistant,
                Text = $"Error: {ex.Message}",
                Timestamp = DateTime.Now
            });
            
            Logger.LogError(ex, "Failed to process chat message");
        }
        finally
        {
            isSending = false;
            StateHasChanged();
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isSending)
        {
            _ = SendTestMessage();
        }
    }

    private void ClearChat()
    {
        chatMessages.Clear();
        StateHasChanged();
    }

    private class ChatMessageWithTimestamp
    {
        public ChatRole Role { get; set; }
        public string? Text { get; set; }
        public DateTime Timestamp { get; set; }
    }
}