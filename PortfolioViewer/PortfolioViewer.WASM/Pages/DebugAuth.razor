@page "/debug-auth"
@using GhostfolioSidekick.PortfolioViewer.WASM.Services
@inject ITokenValidationService TokenValidationService
@inject HttpClient HttpClient
@inject IConfiguration Configuration
@inject ILogger<DebugAuth> Logger

<PageTitle>Debug Authentication</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <h1 class="display-4">Authentication Debug</h1>
            <p class="text-muted">Debug authentication and API connectivity</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Configuration</h5>
                </div>
                <div class="card-body">
                    <p><strong>HttpClient Base Address:</strong> @HttpClient.BaseAddress</p>
                    <p><strong>Configured Token:</strong> @(string.IsNullOrEmpty(ConfiguredToken) ? "Not configured" : "Configured")</p>
                    <p><strong>API Service HTTPS:</strong> @(string.Join(", ", ApiServiceHttps))</p>
                    <p><strong>API Service HTTP:</strong> @(string.Join(", ", ApiServiceHttp))</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Test Authentication</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="testToken" class="form-label">Test Token</label>
                        <input type="text" id="testToken" class="form-control" @bind="TestToken" placeholder="Enter test token" />
                    </div>
                    <button class="btn btn-primary" @onclick="TestTokenValidation" disabled="@IsLoading">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Test Token
                    </button>
                    
                    @if (!string.IsNullOrEmpty(TestResult))
                    {
                        <div class="alert @(TestResult.Contains("Success") ? "alert-success" : "alert-danger") mt-3">
                            @TestResult
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">API Health Check</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-secondary" @onclick="TestApiHealth" disabled="@IsLoading">
                        Test API Health
                    </button>
                    
                    @if (!string.IsNullOrEmpty(HealthResult))
                    {
                        <div class="alert @(HealthResult.Contains("Success") ? "alert-success" : "alert-danger") mt-3">
                            @HealthResult
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string TestToken = "your-secret-token-here";
    private string TestResult = string.Empty;
    private string HealthResult = string.Empty;
    private bool IsLoading = false;

    private string ConfiguredToken => Configuration["GhostfolioAccessToken"] ?? string.Empty;
    private string[] ApiServiceHttps => Configuration.GetSection("Services:apiservice:https").Get<string[]>() ?? Array.Empty<string>();
    private string[] ApiServiceHttp => Configuration.GetSection("Services:apiservice:http").Get<string[]>() ?? Array.Empty<string>();

    private async Task TestTokenValidation()
    {
        IsLoading = true;
        TestResult = string.Empty;
        StateHasChanged();

        try
        {
            var result = await TokenValidationService.ValidateTokenAsync(TestToken);
            TestResult = result ? "Success: Token is valid" : "Error: Token is invalid";
        }
        catch (Exception ex)
        {
            TestResult = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task TestApiHealth()
    {
        IsLoading = true;
        HealthResult = string.Empty;
        StateHasChanged();

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "/api/auth/health");
            var response = await HttpClient.SendAsync(request);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                HealthResult = $"Success: API is healthy. Response: {content}";
            }
            else
            {
                HealthResult = $"Error: API returned {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            HealthResult = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}