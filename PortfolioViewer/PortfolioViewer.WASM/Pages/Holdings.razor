@page "/holdings"
@using GhostfolioSidekick.PortfolioViewer.WASM.Models
@inject GhostfolioSidekick.PortfolioViewer.WASM.Services.ITestContextService TestContextService

<PageTitle>Holdings</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <h1 class="display-4">Portfolio Holdings</h1>
            <p class="text-muted">Current portfolio performance and allocation</p>
        </div>
    </div>

    @if (IsLoading)
    {
        <!-- Loading State -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center py-5">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <h5 class="text-muted">Loading Portfolio Data...</h5>
                        <p class="text-muted mb-0">Please wait while we fetch your holdings information.</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (HasError)
    {
        <!-- Error State -->
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Error Loading Data</h4>
                    <p>@ErrorMessage</p>
                    <hr>
                    <button class="btn btn-outline-danger" @onclick="RefreshDataAsync">
                        <i class="bi bi-arrow-clockwise"></i> Try Again
                    </button>
                </div>
            </div>
        </div>
    }
    else if (!HoldingsList.Any())
    {
        <!-- Empty State -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-pie-chart text-muted" style="font-size: 4rem;"></i>
                        <h5 class="text-muted mt-3">No Holdings Found</h5>
                        <p class="text-muted mb-3">Your portfolio appears to be empty or data hasn't been synced yet.</p>
                        <button class="btn btn-primary" @onclick="RefreshDataAsync">
                            <i class="bi bi-arrow-clockwise"></i> Refresh Data
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Main Content -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Portfolio Overview</h5>
                        <div class="d-flex gap-2">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn @(ViewMode == "treemap" ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="@(() => ViewMode = "treemap")">
                                    <i class="bi bi-diagram-3"></i> Treemap
                                </button>
                                <button type="button" class="btn @(ViewMode == "table" ? "btn-primary" : "btn-outline-primary")"
                                        @onclick="@(() => ViewMode = "table")">
                                    <i class="bi bi-table"></i> Table
                                </button>
                            </div>
                            <button class="btn btn-outline-secondary" @onclick="RefreshDataAsync" disabled="@IsLoading">
                                <i class="bi bi-arrow-clockwise"></i> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (ViewMode == "treemap" && !TestContextService.IsTest)
                        {
                            <div class="treemap-container">
                                <PlotlyChart Data="plotData"
                                             Layout="plotLayout"
                                             Config="plotConfig"
                                             style="height: 100%; width: 100%; min-height: 400px;" />
                            </div>
                        }
                        else if (ViewMode == "treemap" && TestContextService.IsTest)
                        {
                            <div class="treemap-container">
                                <!-- Skipped PlotlyChart in test context -->
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th scope="col">
                                                <button type="button" @onclick="@(() => SortBy("Symbol"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Symbol @(sortColumn == "Symbol" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <button type="button" @onclick="@(() => SortBy("Name"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Name @(sortColumn == "Name" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <button type="button" @onclick="@(() => SortBy("Quantity"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Quantity @(sortColumn == "Quantity" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <button type="button" @onclick="@(() => SortBy("AveragePrice"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Avg Price @(sortColumn == "AveragePrice" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <button type="button" @onclick="@(() => SortBy("CurrentPrice"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Current Price @(sortColumn == "CurrentPrice" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col" class="text-end">
                                                <button type="button" @onclick="@(() => SortBy("CurrentValue"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Current Value @(sortColumn == "CurrentValue" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col" class="text-end">
                                                <button type="button" @onclick="@(() => SortBy("GainLoss"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Gain/Loss @(sortColumn == "GainLoss" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col" class="text-end">
                                                <button type="button" @onclick="@(() => SortBy("GainLossPercentage"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    % @(sortColumn == "GainLossPercentage" ? (sortAscending ? "?" : "?") : "")
                                                </button>
                                            </th>
                                            <th scope="col" class="text-end">
                                                <button type="button" @onclick="@(() => SortBy("Weight"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Weight @(sortColumn == "Weight" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <button type="button" @onclick="@(() => SortBy("Sector"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Sector @(sortColumn == "Sector" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                            <th scope="col">
                                                <button type="button" @onclick="@(() => SortBy("AssetClass"))" class="btn btn-link text-white text-decoration-none p-0">
                                                    Asset Class @(sortColumn == "AssetClass" ? (sortAscending ? "↑" : "↓") : "")
                                                </button>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var holding in HoldingsList)
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@holding.Symbol</strong>
                                                </td>
                                                <td>@holding.Name</td>
                                                <td>@holding.Quantity.ToString("N2")</td>
                                                <td>@CurrencyDisplay.DisplaySignAndAmount(@holding.AveragePrice)</td>
                                                <td>@CurrencyDisplay.DisplaySignAndAmount(@holding.CurrentPrice)</td>
                                                <td class="text-end">
                                                    <strong>@CurrencyDisplay.DisplaySignAndAmount(@holding.CurrentValue)</strong>
                                                </td>
                                                <td class="text-end">
                                                    <span class="@(holding.GainLoss.Amount >= 0 ? "text-success" : "text-danger")">
                                                        @CurrencyDisplay.DisplaySignAndAmount(@holding.GainLoss)
                                                    </span>
                                                </td>
                                                <td class="text-end">
                                                    <span class="@(holding.GainLossPercentage >= 0 ? "text-success" : "text-danger")">
                                                        Currency @holding.GainLossPercentage.ToString("P2")
                                                    </span>
                                                </td>
                                                <td class="text-end">@holding.Weight.ToString("P1")</td>
                                                <td>
                                                    <span class="badge bg-secondary">@holding.Sector</span>
                                                </td>
                                                <td>
                                                    <span class="badge bg-info">@holding.AssetClass</span>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot class="table-light">
                                        <tr>
                                            <th colspan="5">Total Portfolio Value</th>
                                            <th class="text-end">CurrencyDisplay.DisplaySignAndAmount(@TotalValue.Amount)</th>
                                            <th class="text-end">
                                                <span class="@(TotalGainLoss.Amount >= 0 ? "text-success" : "text-danger")">
                                                    CurrencyDisplay.DisplaySignAndAmount(@TotalGainLoss.Amount)
                                                </span>
                                            </th>
                                            <th class="text-end">
                                                <span class="@(TotalGainLossPercentage >= 0 ? "text-success" : "text-danger")">
                                                    @TotalGainLossPercentage.ToString("P2")
                                                </span>
                                            </th>
                                            <th class="text-end">100.0%</th>
                                            <th colspan="2"></th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (ViewMode == "table")
        {
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">Sector Allocation</h6>
                        </div>
                        <div class="card-body">
                            @foreach (var sector in SectorAllocation)
                            {
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <span>@sector.Key</span>
                                        <span>@sector.Value.ToString("P1")</span>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar" style="width: @(sector.Value * 100)%"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">Asset Class Allocation</h6>
                        </div>
                        <div class="card-body">
                            @foreach (var assetClass in AssetClassAllocation)
                            {
                                <div class="mb-2">
                                    <div class="d-flex justify-content-between">
                                        <span>@assetClass.Key</span>
                                        <span>@assetClass.Value.ToString("P1")</span>
                                    </div>
                                    <div class="progress" style="height: 6px;">
                                        <div class="progress-bar bg-info" style="width: @(assetClass.Value * 100)%"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<style>
    .treemap-container {
        width: 100%;
        min-height: 400px;
        height: 60vh;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        overflow: hidden;
        background: white;
        margin-bottom: 1rem;
    }

    .table th {
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }
</style>