@page "/currency-example"
@using GhostfolioSidekick.Model
@using GhostfolioSidekick.PortfolioViewer.WASM.Data.Services
@inject IServerConfigurationService ServerConfigurationService

<PageTitle>Currency Usage Example</PageTitle>

<h3>Primary Currency Example</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Synchronous Access (Cached or Default)</h5>
            </div>
            <div class="card-body">
                <p><strong>Current Primary Currency:</strong> @ServerConfigurationService.PrimaryCurrency.Symbol</p>
                <p class="text-muted">This returns the cached value or EUR as default if not loaded yet.</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Asynchronous Access (From Server)</h5>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading primary currency from server...</span>
                }
                else
                {
                    <p><strong>Primary Currency from Server:</strong> @primaryCurrencyFromServer?.Symbol</p>
                    <button class="btn btn-primary btn-sm" @onclick="LoadPrimaryCurrencyAsync">
                        Reload from Server
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<div class="mt-3">
    <div class="alert alert-info">
        <h6>Usage Guidelines:</h6>
        <ul>
            <li>Use <code>ServerConfigurationService.PrimaryCurrency</code> for synchronous access when you need the currency immediately</li>
            <li>Use <code>await ServerConfigurationService.GetPrimaryCurrencyAsync()</code> when you want to ensure the latest value from the server</li>
            <li>The service caches the result, so multiple calls to the async method won't trigger multiple HTTP requests</li>
            <li>The application preloads the primary currency during startup to minimize blocking</li>
        </ul>
    </div>
</div>

@code {
    private Currency? primaryCurrencyFromServer;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPrimaryCurrencyAsync();
    }

    private async Task LoadPrimaryCurrencyAsync()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            primaryCurrencyFromServer = await ServerConfigurationService.GetPrimaryCurrencyAsync();
        }
        catch (Exception)
        {
            // Handle error - in real scenarios you might want to show an error message
            primaryCurrencyFromServer = Currency.EUR; // Fallback
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}