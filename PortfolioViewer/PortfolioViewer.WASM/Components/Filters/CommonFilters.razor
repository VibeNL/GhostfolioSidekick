@using GhostfolioSidekick.Model
@using GhostfolioSidekick.Model.Accounts
@inject GhostfolioSidekick.PortfolioViewer.WASM.Services.IHoldingsDataService HoldingsDataService

<div class="filters-container">
    @if (ShowDateFilters)
    {
        <div class="filter-group date-filters">
            <div class="btn-group mb-2" role="group" aria-label="Quick Date Ranges">
                <button class="btn @(GetDateRangeButtonClass("LastWeek"))" @onclick='() => SetDateRange("LastWeek")'>1W</button>
                <button class="btn @(GetDateRangeButtonClass("LastMonth"))" @onclick='() => SetDateRange("LastMonth")'>1M</button>
                <button class="btn @(GetDateRangeButtonClass("YearToDate"))" @onclick='() => SetDateRange("YearToDate")'>YTD</button>
                <button class="btn @(GetDateRangeButtonClass("OneYear"))" @onclick='() => SetDateRange("OneYear")'>1Y</button>
                <button class="btn @(GetDateRangeButtonClass("FiveYear"))" @onclick='() => SetDateRange("FiveYear")'>5Y</button>
                <button class="btn @(GetDateRangeButtonClass("Max"))" @onclick='() => SetDateRange("Max")'>All</button>
            </div>
            
            <div class="d-flex gap-2 flex-wrap">
                <div class="date-input">
                    <label class="form-label-sm">From</label>
                    <input type="date" class="form-control form-control-sm" @bind="StartDate" @bind:after="OnDateChanged" />
                </div>
                <div class="date-input">
                    <label class="form-label-sm">To</label>
                    <input type="date" class="form-control form-control-sm" @bind="EndDate" @bind:after="OnDateChanged" />
                </div>
            </div>
        </div>
    }

    @if (ShowCurrencyFilter)
    {
        <div class="filter-group">
            <label class="form-label-sm">Currency</label>
            <select class="form-select form-select-sm" @bind="SelectedCurrency" @bind:after="OnCurrencyChanged">
                <option value="EUR">EUR</option>
                <option value="USD">USD</option>
                <option value="GBP">GBP</option>
            </select>
        </div>
    }

    @if (ShowAccountFilter)
    {
        <div class="filter-group">
            <label class="form-label-sm">Account</label>
            <select class="form-select form-select-sm" @bind="SelectedAccountId" @bind:after="OnAccountChanged">
                <option value="0">All Accounts</option>
                @foreach (var account in Accounts)
                {
                    <option value="@account.Id">@account.Name</option>
                }
            </select>
        </div>
    }
</div>

@code {
    [Parameter] public bool ShowDateFilters { get; set; } = false;
    [Parameter] public bool ShowCurrencyFilter { get; set; } = false;
    [Parameter] public bool ShowAccountFilter { get; set; } = false;

    [Parameter] public DateTime StartDate { get; set; } = DateTime.Today.AddMonths(-6);
    [Parameter] public DateTime EndDate { get; set; } = DateTime.Today;
    [Parameter] public string SelectedCurrency { get; set; } = "EUR";
    [Parameter] public int SelectedAccountId { get; set; } = 0;

    [Parameter] public EventCallback<DateTime> StartDateChanged { get; set; }
    [Parameter] public EventCallback<DateTime> EndDateChanged { get; set; }
    [Parameter] public EventCallback<string> SelectedCurrencyChanged { get; set; }
    [Parameter] public EventCallback<int> SelectedAccountIdChanged { get; set; }
    [Parameter] public EventCallback OnFiltersChanged { get; set; }

    private List<Account> Accounts { get; set; } = new();
    private string? _currentDateRange = null;

    protected override async Task OnInitializedAsync()
    {
        if (ShowAccountFilter)
        {
            Accounts = await HoldingsDataService.GetAccountsAsync();
        }
    }

    private string GetDateRangeButtonClass(string range)
    {
        return _currentDateRange == range ? "btn-primary" : "btn-outline-primary";
    }

    private async Task SetDateRange(string range)
    {
        _currentDateRange = range;
        var today = DateTime.Today;
        
        switch (range)
        {
            case "LastWeek":
                StartDate = today.AddDays(-7);
                EndDate = today;
                break;
            case "LastMonth":
                StartDate = today.AddMonths(-1);
                EndDate = today;
                break;
            case "YearToDate":
                StartDate = new DateTime(today.Year, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                EndDate = today;
                break;
            case "OneYear":
                StartDate = today.AddYears(-1);
                EndDate = today;
                break;
            case "FiveYear":
                StartDate = today.AddYears(-5);
                EndDate = today;
                break;
            case "Max":
                StartDate = new DateTime(2020, 1, 1); // Adjust to your earliest data date if needed
                EndDate = today;
                break;
        }

        await NotifyFiltersChanged();
    }

    private async Task OnDateChanged()
    {
        _currentDateRange = null; // Clear quick date selection when manual dates are used
        await NotifyFiltersChanged();
    }

    private async Task OnCurrencyChanged()
    {
        await SelectedCurrencyChanged.InvokeAsync(SelectedCurrency);
        await NotifyFiltersChanged();
    }

    private async Task OnAccountChanged()
    {
        await SelectedAccountIdChanged.InvokeAsync(SelectedAccountId);
        await NotifyFiltersChanged();
    }

    private async Task NotifyFiltersChanged()
    {
        await StartDateChanged.InvokeAsync(StartDate);
        await EndDateChanged.InvokeAsync(EndDate);
        await OnFiltersChanged.InvokeAsync();
    }
}