@using Microsoft.AspNetCore.Components

<nav aria-label="Page navigation">
    <!-- Mobile-First Compact Pagination -->
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-center gap-2">
        <!-- Mobile Pagination Controls -->
        <div class="d-flex align-items-center gap-1 order-2 order-md-1">
            <!-- Previous Button -->
            <button class="btn btn-outline-primary btn-pagination @(CurrentPage <= 1 ? "disabled" : "")" 
                    @onclick="() => GoToPage(CurrentPage - 1)" 
                    disabled="@(CurrentPage <= 1)"
                    title="Previous page">
                <i class="bi bi-chevron-left"></i>
                <span class="d-none d-sm-inline ms-1">Prev</span>
            </button>

            <!-- Mobile: Show only essential page numbers -->
            <div class="d-none d-md-flex align-items-center">
                <!-- Desktop pagination (existing logic) -->
                @if (StartPage > 1)
                {
                    <button class="btn btn-outline-secondary btn-pagination" @onclick="() => GoToPage(1)">1</button>
                    @if (StartPage > 2)
                    {
                        <span class="px-2 text-muted">...</span>
                    }
                }

                @for (int i = StartPage; i <= EndPage; i++)
                {
                    var pageNum = i;
                    <button class="btn @(CurrentPage == pageNum ? "btn-primary" : "btn-outline-secondary") btn-pagination" 
                            @onclick="() => GoToPage(pageNum)">
                        @pageNum
                    </button>
                }

                @if (EndPage < TotalPages)
                {
                    @if (EndPage < TotalPages - 1)
                    {
                        <span class="px-2 text-muted">...</span>
                    }
                    <button class="btn btn-outline-secondary btn-pagination" @onclick="() => GoToPage(TotalPages)">@TotalPages</button>
                }
            </div>

            <!-- Mobile: Page indicator and jump -->
            <div class="d-flex d-md-none align-items-center mx-2">
                <select class="form-select form-select-sm page-select" @onchange="OnPageSelectChanged" value="@CurrentPage">
                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
                <span class="text-muted ms-2 small">of @TotalPages</span>
            </div>

            <!-- Next Button -->
            <button class="btn btn-outline-primary btn-pagination @(CurrentPage >= TotalPages ? "disabled" : "")" 
                    @onclick="() => GoToPage(CurrentPage + 1)" 
                    disabled="@(CurrentPage >= TotalPages)"
                    title="Next page">
                <span class="d-none d-sm-inline me-1">Next</span>
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>

        <!-- Page Info and Size Selector -->
        <div class="d-flex flex-column flex-sm-row align-items-center gap-2 order-1 order-md-2">
            <!-- Records Info -->
            <small class="text-muted text-center text-sm-start">
                <span class="d-none d-sm-inline">Showing @StartRecord - @EndRecord of @TotalRecords records</span>
                <span class="d-sm-none">@StartRecord-@EndRecord of @TotalRecords</span>
            </small>
            
            <!-- Page Size Selector -->
            <div class="d-flex align-items-center gap-1">
                <small class="text-muted d-none d-sm-inline">Show:</small>
                <select class="form-select form-select-sm page-size-select" @onchange="PageSizeChanged" value="@PageSize">
                    @foreach (var size in PageSizeOptions)
                    {
                        <option value="@size">@size</option>
                    }
                </select>
                <small class="text-muted d-none d-sm-inline">per page</small>
            </div>
        </div>
    </div>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int PageSize { get; set; } = 25;
    [Parameter] public int TotalRecords { get; set; } = 0;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public EventCallback<int> OnPageSizeChanged { get; set; }
    [Parameter] public List<int> PageSizeOptions { get; set; } = new() { 10, 25, 50, 100 };

    private int TotalPages => (int)Math.Ceiling((double)TotalRecords / PageSize);
    private int StartRecord => TotalRecords == 0 ? 0 : (CurrentPage - 1) * PageSize + 1;
    private int EndRecord => Math.Min(CurrentPage * PageSize, TotalRecords);

    // Calculate visible page range (show up to 5 pages around current page)
    private int StartPage => Math.Max(1, Math.Min(CurrentPage - 2, TotalPages - 4));
    private int EndPage => Math.Min(TotalPages, StartPage + 4);

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages && page != CurrentPage)
        {
            await OnPageChanged.InvokeAsync(page);
        }
    }

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            await OnPageSizeChanged.InvokeAsync(newPageSize);
        }
    }

    private async Task OnPageSelectChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedPage))
        {
            await GoToPage(selectedPage);
        }
    }
}