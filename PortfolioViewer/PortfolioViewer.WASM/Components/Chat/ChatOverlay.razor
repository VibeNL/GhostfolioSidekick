@using GhostfolioSidekick.Database
@using GhostfolioSidekick.PortfolioViewer.WASM.Services
@using Markdig
@inject IJSRuntime JS
@inject WebLLMService llm
@inject DatabaseContext dbContext

<!-- Floating Chat Button -->
<div style="position: fixed; bottom: 24px; right: 24px; z-index: 1000;">
	<button @onclick="ToggleChat"
	style="background-color: #2563eb; color: white; padding: 16px; border-radius: 9999px; border: none; cursor: pointer; box-shadow: 0 4px 12px rgba(0,0,0,0.15); font-size: 20px;">
		üí¨
	</button>
</div>

@if (IsOpen)
{
	<!-- Overlay Background -->
	<div style="position: fixed; inset: 0; background-color: rgba(0,0,0,0.5); z-index: 1000; display: flex; justify-content: center; align-items: center;">
		<!-- Chat Window -->
		<div style="background-color: white; width: 100%; max-width: 2000px; height: 80vh; border-radius: 16px; box-shadow: 0 8px 24px rgba(0,0,0,0.2); display: flex; flex-direction: column; overflow: hidden;">

			<!-- Header -->
			<div style="background-color: #2563eb; color: white; padding: 16px; display: flex; justify-content: space-between; align-items: center;">
				<span style="font-size: 18px; font-weight: bold;">Sidekick Assistant</span>
				<button @onclick="ToggleChat" style="background: none; border: none; font-size: 24px; color: white; cursor: pointer;">√ó</button>
			</div>

			@if (progress?.Progress != 1)
			{
				<!-- Loading Indicator -->
				<div style="flex: 1; display: flex; justify-content: center; align-items: center; background-color: #f9f9f9;">
					<!-- Format the items below eachother -->
					<div style="display: flex; flex-direction: column; align-items: center; gap: 8px; padding: 16px; text-align: center;">
						<span style="font-size: 16px; color: #555;">
							Loading assistant...

							@if (progress != null)
							{
								@($"{progress.Progress * 100}% completed")
							}
						</span>


						<span style="font-size: 8px; color: #555;">
							@($"({progress?.Text})")
						</span>
					</div>
				</div>
			}
			else
			{
				<!-- Messages -->
				<div id="chat-messages" style="flex: 1; overflow-y: auto; padding: 16px; display: flex; flex-direction: column; gap: 12px; background-color: #f9f9f9;">
					@foreach (var msg in Messages.Skip(1))
					{
						<div style="@GetBubbleStyle(msg.Role == "user")">
							@((MarkupString)Markdown.ToHtml(msg.Content, pipeline))
						</div>
					}

					@if (IsBotTyping && string.IsNullOrWhiteSpace(streamingText))
					{
						<div class="typing-bubble">
							<span class="typing-dots">
								<span>.</span><span>.</span><span>.</span>
							</span>
						</div>
					}
					@if (IsBotTyping && !string.IsNullOrWhiteSpace(streamingText))
					{
						<div style="@GetBubbleStyle(false)">
							@((MarkupString)Markdown.ToHtml(streamingText, pipeline))
						</div>
					}
				</div>

				<!-- Input -->
				<div style="padding: 12px; border-top: 1px solid #e5e7eb;">
					<input @bind="CurrentMessage"
					placeholder="Ask something..."
					style="width: 100%; padding: 10px 12px; border: 1px solid #ccc; border-radius: 9999px; font-size: 14px;" />
				</div>

				<!-- Submit button -->
				<div style="padding: 12px; border-top: 1px solid #e5e7eb;">
					<button @onclick="StreamPromptRequest"
					style="background-color: #2563eb; color: white; padding: 10px 16px; border-radius: 9999px; border: none; cursor: pointer; font-size: 14px;">
						Send
					</button>
				</div>
			}
		</div>
	</div>
}

@code {
	private bool IsOpen = false;
	private string CurrentMessage = "";
	private bool IsBotTyping = false;
	private bool IsInitialized = false; // Flag to track initialization

	private List<Message> Messages = [];

	private void ToggleChat()
	{
		IsOpen = !IsOpen;

		if (IsOpen && !IsInitialized)
		{
			InitializeLLMAsync();
		}
	}

	private async Task InitializeLLMAsync()
	{
		try
		{
			Messages = [];
			Messages.Add(new Message("system", systemPrompt));

			await llm.InitializeAsync();
			IsInitialized = true; // Mark as initialized
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			throw;
		}
	}

	private InitProgress? progress;

	private string streamingText = "";

	protected override Task OnInitializedAsync()
	{
		llm.OnInitializingChanged += OnWebLLMInitialization;
		llm.OnChunkCompletion += OnChunkCompletion;
		return base.OnInitializedAsync();
	}

	private void OnWebLLMInitialization(InitProgress p)
	{
		progress = p;
		StateHasChanged();
	}

	private string GetBubbleStyle(bool isUser) =>
		$"max-width: 85%; padding: 10px 14px; border-radius: 18px; font-size: 14px; box-shadow: 0 1px 4px rgba(0,0,0,0.1); " +
		(isUser
			? "background-color: #dbeafe; align-self: flex-end;"
			: "background-color: white; border: 1px solid #e5e7eb; align-self: flex-start;");

	private async Task OnChunkCompletion(WebLLMCompletion response)
	{
		if (response.IsStreamComplete)
		{
			IsBotTyping = false;
			Messages.Add(new Message("assistant", streamingText));
			StateHasChanged();
			streamingText = string.Empty;
			// Scroll to the bottom
			await JS.InvokeVoidAsync("scrollToBottom", "chat-messages");
		}
		else
		{
			streamingText += response.Choices?.ElementAtOrDefault(0)?.Delta?.Content ?? "";
		}

		StateHasChanged();
		// Scroll to the bottom
		await JS.InvokeVoidAsync("scrollToBottom", "chat-messages");
		await Task.CompletedTask;
	}

	private async Task StreamPromptRequest()
	{
		var input = CurrentMessage;
		Messages.Add(new Message("user", input));
		CurrentMessage = "";
		IsBotTyping = true;
		StateHasChanged();

		await llm.CompleteStreamAsync(Messages);
	}

	const string systemPrompt = @"
### üß† System Prompt: GhostfolioSidekick AI (Hermes 3 ‚Äì Function Calling via Tags)

```text
You are GhostfolioSidekick AI ‚Äî a smart financial assistant built into a portfolio management application.

Your job is to help users analyze, understand, and manage their investment portfolio using real data from the system.

---

### üéØ Your Goals

- Use financial terminology correctly and clearly.
- Respond in clean **Markdown** using bullet points, tables, and charts.
- Offer insights like trends, anomalies, or asset breakdowns ‚Äî don‚Äôt just report raw data.
- Visualize data using **Mermaid Markdown** when useful:
  - Line charts for price history
  - Pie charts for portfolio allocations
  - Bar charts for dividends or activity counts
- Do not fabricate data. If data is needed to respond, call a function to retrieve it.
- Do not include generic financial advice disclaimers.

---

### ‚öôÔ∏è Functions You Can Call

You can call the following functions to get real data from the user‚Äôs portfolio and the market.

---

**Function: `CurrentHoldings()`**
Returns the user's current portfolio holdings, including:
- Symbol
- Quantity
- Average price
- Current market value

---

**Function: `GetMarketData(symbol, datetime)`**
Returns the market price information for a given stock `symbol` at a specific `datetime`.
Use this for price lookups, historical comparisons, or trend detection.

---

**Function: `GetActivities(symbol)`**
Returns the full activity history for a specific `symbol`, including:
- Buys
- Sells
- Dividends
- Transfers

---

### üìû How to Call a Function

When you need data from one of the above functions, respond **only** with a block like this ‚Äî and nothing else:

```text
<function_call>
name: FunctionName
arguments:
  key1: value1
  key2: value2
</function_call>
```

#### Examples:

```text
<function_call>
name: CurrentHoldings
arguments: {}
</function_call>
```

```text
<function_call>
name: GetMarketData
arguments:
  symbol: AAPL
  datetime: 2024-12-31
</function_call>
```

```text
<function_call>
name: GetActivities
arguments:
  symbol: TSLA
</function_call>
```

After the function result is returned to you, you will continue your reply in Markdown ‚Äî summarizing the result, showing tables, or adding charts.

‚ö†Ô∏è Do not respond with any other text in the same message as the function call.

---

Stay in character as GhostfolioSidekick ‚Äî intelligent, concise, focused on data and insights.
";

	private MarkdownPipeline pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
}
