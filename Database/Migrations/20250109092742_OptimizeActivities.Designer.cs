// <auto-generated />
using System;
using GhostfolioSidekick.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GhostfolioSidekick.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250109092742_OptimizeActivities")]
    partial class OptimizeActivities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("GhostfolioSidekick.Database.TypeConfigurations.PartialSymbolIdentifierActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PartialSymbolIdentifierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("PartialSymbolIdentifierId");

                    b.ToTable("PartialSymbolIdentifierActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "Date")
                        .IsUnique();

                    b.ToTable("Balances", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<int?>("HoldingId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SortingPriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("HoldingId");

                    b.ToTable("Activities", (string)null);

                    b.HasDiscriminator().HasValue("Activity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.PartialSymbolIdentifier", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<string>("AllowedAssetClasses")
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedAssetSubClasses")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("PartialSymbolIdentifiers", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Holding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartialSymbolIdentifiers")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("PartialSymbolIdentifiers");

                    b.HasKey("Id");

                    b.ToTable("Holdings", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.MarketData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("Date");

                    b.Property<string>("SymbolProfileDataSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("SymbolProfileSymbol")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TradingVolume")
                        .HasColumnType("TEXT")
                        .HasColumnName("TradingVolume");

                    b.HasKey("ID");

                    b.HasIndex("SymbolProfileSymbol", "SymbolProfileDataSource");

                    b.ToTable("MarketData", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.StockSplit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<decimal>("AfterSplit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BeforeSplit")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("SymbolProfileDataSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("SymbolProfileSymbol")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SymbolProfileSymbol", "SymbolProfileDataSource");

                    b.ToTable("StockSplits", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Symbols.SymbolProfile", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetSubClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryWeight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HoldingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ISIN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifiers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SectorWeights")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Symbol", "DataSource");

                    b.HasIndex("HoldingId");

                    b.ToTable("SymbolProfiles", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.Property<decimal?>("AdjustedQuantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ActivityWithQuantityAndUnitPrice");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.CashDepositWithdrawalActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.HasDiscriminator().HasValue("CashDepositWithdrawalActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.DividendActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.HasDiscriminator().HasValue("DividendActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.FeeActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.HasDiscriminator().HasValue("FeeActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.InterestActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.HasDiscriminator().HasValue("InterestActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.KnownBalanceActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.HasDiscriminator().HasValue("KnownBalanceActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.LiabilityActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.HasDiscriminator().HasValue("LiabilityActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.RepayBondActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.HasDiscriminator().HasValue("RepayBondActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.ValuableActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.HasDiscriminator().HasValue("ValuableActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.BuySellActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice");

                    b.HasDiscriminator().HasValue("BuySellActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.GiftActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice");

                    b.HasDiscriminator().HasValue("GiftActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.SendAndReceiveActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice");

                    b.HasDiscriminator().HasValue("SendAndReceiveActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.StakingRewardActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice");

                    b.HasDiscriminator().HasValue("StakingRewardActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.TypeConfigurations.PartialSymbolIdentifierActivity", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice", null)
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.DividendActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.LiabilityActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.RepayBondActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.ValuableActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("GhostfolioSidekick.Model.Activities.PartialSymbolIdentifier", null)
                        .WithMany()
                        .HasForeignKey("PartialSymbolIdentifierId");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Account", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Accounts.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Balance", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Accounts.Account", null)
                        .WithMany("Balance")
                        .HasForeignKey("AccountId");

                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Money", b1 =>
                        {
                            b1.Property<int>("BalanceId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.HasKey("BalanceId");

                            b1.ToTable("Balances");

                            b1.WithOwner()
                                .HasForeignKey("BalanceId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyBalanceId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("Currency");

                                    b2.HasKey("MoneyBalanceId");

                                    b2.ToTable("Balances");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyBalanceId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Money")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Activity", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostfolioSidekick.Model.Holding", "Holding")
                        .WithMany("Activities")
                        .HasForeignKey("HoldingId");

                    b.Navigation("Account");

                    b.Navigation("Holding");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.MarketData", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Symbols.SymbolProfile", null)
                        .WithMany("MarketData")
                        .HasForeignKey("SymbolProfileSymbol", "SymbolProfileDataSource")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Close", b1 =>
                        {
                            b1.Property<int>("MarketDataID")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Close");

                            b1.HasKey("MarketDataID");

                            b1.ToTable("MarketData");

                            b1.WithOwner()
                                .HasForeignKey("MarketDataID");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyMarketDataID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyClose");

                                    b2.HasKey("MoneyMarketDataID");

                                    b2.ToTable("MarketData");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyMarketDataID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsOne("GhostfolioSidekick.Model.Money", "High", b1 =>
                        {
                            b1.Property<int>("MarketDataID")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("High");

                            b1.HasKey("MarketDataID");

                            b1.ToTable("MarketData");

                            b1.WithOwner()
                                .HasForeignKey("MarketDataID");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyMarketDataID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyHigh");

                                    b2.HasKey("MoneyMarketDataID");

                                    b2.ToTable("MarketData");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyMarketDataID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Low", b1 =>
                        {
                            b1.Property<int>("MarketDataID")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Low");

                            b1.HasKey("MarketDataID");

                            b1.ToTable("MarketData");

                            b1.WithOwner()
                                .HasForeignKey("MarketDataID");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyMarketDataID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyLow");

                                    b2.HasKey("MoneyMarketDataID");

                                    b2.ToTable("MarketData");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyMarketDataID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Open", b1 =>
                        {
                            b1.Property<int>("MarketDataID")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Open");

                            b1.HasKey("MarketDataID");

                            b1.ToTable("MarketData");

                            b1.WithOwner()
                                .HasForeignKey("MarketDataID");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyMarketDataID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyOpen");

                                    b2.HasKey("MoneyMarketDataID");

                                    b2.ToTable("MarketData");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyMarketDataID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Close")
                        .IsRequired();

                    b.Navigation("High")
                        .IsRequired();

                    b.Navigation("Low")
                        .IsRequired();

                    b.Navigation("Open")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.StockSplit", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Symbols.SymbolProfile", null)
                        .WithMany("StockSplits")
                        .HasForeignKey("SymbolProfileSymbol", "SymbolProfileDataSource")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Symbols.SymbolProfile", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Holding", null)
                        .WithMany("SymbolProfiles")
                        .HasForeignKey("HoldingId");

                    b.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b1 =>
                        {
                            b1.Property<string>("SymbolProfileSymbol")
                                .HasColumnType("TEXT");

                            b1.Property<string>("SymbolProfileDataSource")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Currency");

                            b1.HasKey("SymbolProfileSymbol", "SymbolProfileDataSource");

                            b1.ToTable("SymbolProfiles");

                            b1.WithOwner()
                                .HasForeignKey("SymbolProfileSymbol", "SymbolProfileDataSource");
                        });

                    b.Navigation("Currency")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "AdjustedUnitPrice", b1 =>
                        {
                            b1.Property<long>("ActivityWithQuantityAndUnitPriceId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("AdjustedUnitPrice");

                            b1.HasKey("ActivityWithQuantityAndUnitPriceId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityWithQuantityAndUnitPriceId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyActivityWithQuantityAndUnitPriceId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAdjustedUnitPrice");

                                    b2.HasKey("MoneyActivityWithQuantityAndUnitPriceId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyActivityWithQuantityAndUnitPriceId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsOne("GhostfolioSidekick.Model.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<long>("ActivityWithQuantityAndUnitPriceId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("UnitPrice");

                            b1.HasKey("ActivityWithQuantityAndUnitPriceId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityWithQuantityAndUnitPriceId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyActivityWithQuantityAndUnitPriceId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyUnitPrice");

                                    b2.HasKey("MoneyActivityWithQuantityAndUnitPriceId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyActivityWithQuantityAndUnitPriceId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsMany("GhostfolioSidekick.Model.Activities.CalculatedPriceTrace", "AdjustedUnitPriceSource", b1 =>
                        {
                            b1.Property<long>("ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Key", 0);

                            b1.Property<long>("ActivityWithQuantityAndUnitPriceId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ID");

                            b1.HasIndex("ActivityWithQuantityAndUnitPriceId");

                            b1.ToTable("CalculatedPriceTrace", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ActivityWithQuantityAndUnitPriceId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Money", "NewPrice", b2 =>
                                {
                                    b2.Property<long>("CalculatedPriceTraceID")
                                        .HasColumnType("integer");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("TEXT")
                                        .HasColumnName("Amount");

                                    b2.HasKey("CalculatedPriceTraceID");

                                    b2.ToTable("CalculatedPriceTrace");

                                    b2.WithOwner()
                                        .HasForeignKey("CalculatedPriceTraceID");

                                    b2.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b3 =>
                                        {
                                            b3.Property<long>("MoneyCalculatedPriceTraceID")
                                                .HasColumnType("integer");

                                            b3.Property<string>("Symbol")
                                                .IsRequired()
                                                .HasColumnType("TEXT")
                                                .HasColumnName("Currency");

                                            b3.HasKey("MoneyCalculatedPriceTraceID");

                                            b3.ToTable("CalculatedPriceTrace");

                                            b3.WithOwner()
                                                .HasForeignKey("MoneyCalculatedPriceTraceID");
                                        });

                                    b2.Navigation("Currency")
                                        .IsRequired();
                                });

                            b1.Navigation("NewPrice");
                        });

                    b.Navigation("AdjustedUnitPrice");

                    b.Navigation("AdjustedUnitPriceSource");

                    b.Navigation("UnitPrice");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.CashDepositWithdrawalActivity", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Amount", b1 =>
                        {
                            b1.Property<long>("CashDepositWithdrawalActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.HasKey("CashDepositWithdrawalActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("CashDepositWithdrawalActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyCashDepositWithdrawalActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");

                                    b2.HasKey("MoneyCashDepositWithdrawalActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyCashDepositWithdrawalActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.DividendActivity", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Amount", b1 =>
                        {
                            b1.Property<long>("DividendActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.HasKey("DividendActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("DividendActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyDividendActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");

                                    b2.HasKey("MoneyDividendActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyDividendActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsMany("GhostfolioSidekick.Model.Money", "Fees", b1 =>
                        {
                            b1.Property<int>("ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Key", 0);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Fees");

                            b1.Property<long>("DividendActivityId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ID");

                            b1.HasIndex("DividendActivityId");

                            b1.ToTable("DividendActivityFees", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DividendActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyFees");

                                    b2.HasKey("MoneyID");

                                    b2.ToTable("DividendActivityFees");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsMany("GhostfolioSidekick.Model.Money", "Taxes", b1 =>
                        {
                            b1.Property<int>("ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Key", 0);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Taxes");

                            b1.Property<long>("DividendActivityId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ID");

                            b1.HasIndex("DividendActivityId");

                            b1.ToTable("DividendActivityTaxes", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DividendActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyTaxes");

                                    b2.HasKey("MoneyID");

                                    b2.ToTable("DividendActivityTaxes");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Fees");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.FeeActivity", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Amount", b1 =>
                        {
                            b1.Property<long>("FeeActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.HasKey("FeeActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("FeeActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyFeeActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");

                                    b2.HasKey("MoneyFeeActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyFeeActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.InterestActivity", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Amount", b1 =>
                        {
                            b1.Property<long>("InterestActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.HasKey("InterestActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("InterestActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyInterestActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");

                                    b2.HasKey("MoneyInterestActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyInterestActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.KnownBalanceActivity", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Amount", b1 =>
                        {
                            b1.Property<long>("KnownBalanceActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.HasKey("KnownBalanceActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("KnownBalanceActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyKnownBalanceActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");

                                    b2.HasKey("MoneyKnownBalanceActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyKnownBalanceActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.LiabilityActivity", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Price", b1 =>
                        {
                            b1.Property<long>("LiabilityActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Price");

                            b1.HasKey("LiabilityActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("LiabilityActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyLiabilityActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyPrice");

                                    b2.HasKey("MoneyLiabilityActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyLiabilityActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.RepayBondActivity", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "TotalRepayAmount", b1 =>
                        {
                            b1.Property<long>("RepayBondActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("TotalRepayAmount");

                            b1.HasKey("RepayBondActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("RepayBondActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyRepayBondActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyTotalRepayAmount");

                                    b2.HasKey("MoneyRepayBondActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyRepayBondActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("TotalRepayAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.ValuableActivity", b =>
                {
                    b.OwnsOne("GhostfolioSidekick.Model.Money", "Price", b1 =>
                        {
                            b1.Property<long>("ValuableActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Price");

                            b1.HasKey("ValuableActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ValuableActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyValuableActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyPrice");

                                    b2.HasKey("MoneyValuableActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyValuableActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.BuySellActivity", b =>
                {
                    b.OwnsMany("GhostfolioSidekick.Model.Money", "Fees", b1 =>
                        {
                            b1.Property<int>("ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Key", 0);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Fees");

                            b1.Property<long>("BuySellActivityId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ID");

                            b1.HasIndex("BuySellActivityId");

                            b1.ToTable("BuySellActivityFees", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BuySellActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyFees");

                                    b2.HasKey("MoneyID");

                                    b2.ToTable("BuySellActivityFees");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsMany("GhostfolioSidekick.Model.Money", "Taxes", b1 =>
                        {
                            b1.Property<int>("ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Key", 0);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Taxes");

                            b1.Property<long>("BuySellActivityId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ID");

                            b1.HasIndex("BuySellActivityId");

                            b1.ToTable("BuySellActivityTaxes", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BuySellActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyTaxes");

                                    b2.HasKey("MoneyID");

                                    b2.ToTable("BuySellActivityTaxes");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.OwnsOne("GhostfolioSidekick.Model.Money", "TotalTransactionAmount", b1 =>
                        {
                            b1.Property<long>("BuySellActivityId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("TotalTransactionAmount");

                            b1.HasKey("BuySellActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("BuySellActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<long>("MoneyBuySellActivityId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyTotalTransactionAmount");

                                    b2.HasKey("MoneyBuySellActivityId");

                                    b2.ToTable("Activities");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyBuySellActivityId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Fees");

                    b.Navigation("Taxes");

                    b.Navigation("TotalTransactionAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.SendAndReceiveActivity", b =>
                {
                    b.OwnsMany("GhostfolioSidekick.Model.Money", "Fees", b1 =>
                        {
                            b1.Property<int>("ID")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Key", 0);

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Fees");

                            b1.Property<long>("SendAndReceiveActivityId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ID");

                            b1.HasIndex("SendAndReceiveActivityId");

                            b1.ToTable("SendAndReceiveActivityFees", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SendAndReceiveActivityId");

                            b1.OwnsOne("GhostfolioSidekick.Model.Currency", "Currency", b2 =>
                                {
                                    b2.Property<int>("MoneyID")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyFees");

                                    b2.HasKey("MoneyID");

                                    b2.ToTable("SendAndReceiveActivityFees");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyID");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Fees");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Account", b =>
                {
                    b.Navigation("Balance");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Holding", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("SymbolProfiles");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Symbols.SymbolProfile", b =>
                {
                    b.Navigation("MarketData");

                    b.Navigation("StockSplits");
                });
#pragma warning restore 612, 618
        }
    }
}
