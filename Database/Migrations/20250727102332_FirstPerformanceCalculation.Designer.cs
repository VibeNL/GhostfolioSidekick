// <auto-generated />
using System;
using System.Collections.Generic;
using GhostfolioSidekick.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GhostfolioSidekick.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250727102332_FirstPerformanceCalculation")]
    partial class FirstPerformanceCalculation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("GhostfolioSidekick.Database.TypeConfigurations.PartialSymbolIdentifierActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PartialSymbolIdentifierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("PartialSymbolIdentifierId");

                    b.ToTable("PartialSymbolIdentifierActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "GhostfolioSidekick.Model.Accounts.Balance.Money#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Accounts.Balance.Money#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("Currency");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "Date")
                        .IsUnique();

                    b.ToTable("Balances", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<int?>("HoldingId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SortingPriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("HoldingId");

                    b.ToTable("Activities", (string)null);

                    b.HasDiscriminator().HasValue("Activity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.CalculatedPriceTrace", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("NewPrice", "GhostfolioSidekick.Model.Activities.CalculatedPriceTrace.NewPrice#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("NewPrice");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.CalculatedPriceTrace.NewPrice#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyNewPrice");
                                });
                        });

                    b.HasKey("ID");

                    b.HasIndex("ActivityId");

                    b.ToTable("CalculatedPriceTrace", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.PartialSymbolIdentifier", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<string>("AllowedAssetClasses")
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedAssetSubClasses")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Identifier", "AllowedAssetClasses", "AllowedAssetSubClasses")
                        .IsUnique()
                        .HasDatabaseName("IX_PartialSymbolIdentifiers_Identifier_AllowedAssetClass_AllowedAssetSubClass");

                    b.ToTable("PartialSymbolIdentifiers", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.BuySellActivityFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.BuySellActivityFee.Money#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Money");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.BuySellActivityFee.Money#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyMoney");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("BuySellActivityFees", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.BuySellActivityTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.BuySellActivityTax.Money#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Money");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.BuySellActivityTax.Money#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyMoney");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("BuySellActivityTaxes", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.DividendActivityFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.DividendActivityFee.Money#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Money");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.DividendActivityFee.Money#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyMoney");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("DividendActivityFees", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.DividendActivityTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.DividendActivityTax.Money#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Money");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.DividendActivityTax.Money#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyMoney");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("DividendActivityTaxes", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.SendAndReceiveActivityFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Money", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.SendAndReceiveActivityFee.Money#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Money");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.MoneyLists.SendAndReceiveActivityFee.Money#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyMoney");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("SendAndReceiveActivityFees", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Holding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartialSymbolIdentifiers")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("PartialSymbolIdentifiers");

                    b.HasKey("Id");

                    b.ToTable("Holdings", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.CurrencyExchangeRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<long?>("CurrencyExchangeProfileID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("Date");

                    b.Property<decimal>("TradingVolume")
                        .HasColumnType("TEXT")
                        .HasColumnName("TradingVolume");

                    b.ComplexProperty<Dictionary<string, object>>("Close", "GhostfolioSidekick.Model.Market.CurrencyExchangeRate.Close#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Close");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Market.CurrencyExchangeRate.Close#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyClose");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("High", "GhostfolioSidekick.Model.Market.CurrencyExchangeRate.High#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("High");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Market.CurrencyExchangeRate.High#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyHigh");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Low", "GhostfolioSidekick.Model.Market.CurrencyExchangeRate.Low#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Low");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Market.CurrencyExchangeRate.Low#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyLow");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Open", "GhostfolioSidekick.Model.Market.CurrencyExchangeRate.Open#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Open");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Market.CurrencyExchangeRate.Open#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyOpen");
                                });
                        });

                    b.HasKey("ID");

                    b.HasIndex("CurrencyExchangeProfileID", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_CurrencyExchangeRate_CurrencyExchangeProfileID_Date");

                    b.ToTable("CurrencyExchangeRate", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.MarketData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("Date");

                    b.Property<string>("SymbolProfileDataSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SymbolProfileSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TradingVolume")
                        .HasColumnType("TEXT")
                        .HasColumnName("TradingVolume");

                    b.ComplexProperty<Dictionary<string, object>>("Close", "GhostfolioSidekick.Model.Market.MarketData.Close#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Close");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Market.MarketData.Close#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyClose");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("High", "GhostfolioSidekick.Model.Market.MarketData.High#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("High");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Market.MarketData.High#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyHigh");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Low", "GhostfolioSidekick.Model.Market.MarketData.Low#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Low");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Market.MarketData.Low#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyLow");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Open", "GhostfolioSidekick.Model.Market.MarketData.Open#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("Open");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Market.MarketData.Open#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyOpen");
                                });
                        });

                    b.HasKey("ID");

                    b.HasIndex("SymbolProfileSymbol", "SymbolProfileDataSource");

                    b.HasIndex("SymbolProfileDataSource", "SymbolProfileSymbol", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_MarketData_SymbolProfileDataSource_SymbolProfileSymbol_Date");

                    b.ToTable("MarketData", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.StockSplit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<decimal>("AfterSplit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BeforeSplit")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("SymbolProfileDataSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SymbolProfileSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SymbolProfileSymbol", "SymbolProfileDataSource");

                    b.ToTable("StockSplits", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Performance.CalculatedSnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Key", 0);

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<long>("HoldingAggregatedId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("AverageCostPrice", "GhostfolioSidekick.Model.Performance.CalculatedSnapshot.AverageCostPrice#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("AverageCostPrice");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Performance.CalculatedSnapshot.AverageCostPrice#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAverageCostPrice");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("CurrentUnitPrice", "GhostfolioSidekick.Model.Performance.CalculatedSnapshot.CurrentUnitPrice#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("CurrentUnitPrice");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Performance.CalculatedSnapshot.CurrentUnitPrice#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyCurrentUnitPrice");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TotalInvested", "GhostfolioSidekick.Model.Performance.CalculatedSnapshot.TotalInvested#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("TotalInvested");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Performance.CalculatedSnapshot.TotalInvested#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyTotalInvested");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TotalValue", "GhostfolioSidekick.Model.Performance.CalculatedSnapshot.TotalValue#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("TotalValue");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Performance.CalculatedSnapshot.TotalValue#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyTotalValue");
                                });
                        });

                    b.HasKey("Id");

                    b.HasIndex("HoldingAggregatedId");

                    b.ToTable("CalculatedSnapshots", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Performance.HoldingAggregated", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssetClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetSubClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryWeight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SectorWeights")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HoldingAggregateds", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Symbols.CurrencyExchangeProfile", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceCurrency")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("SourceCurrency");

                    b.Property<string>("TargetCurrency")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TargetCurrency");

                    b.HasKey("ID");

                    b.HasIndex("SourceCurrency", "TargetCurrency")
                        .IsUnique();

                    b.ToTable("CurrencyExchangeProfile", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Symbols.SymbolProfile", b =>
                {
                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetSubClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryWeight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HoldingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ISIN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifiers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SectorWeights")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Symbols.SymbolProfile.Currency#Currency", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Currency");
                        });

                    b.HasKey("Symbol", "DataSource");

                    b.HasIndex("HoldingId");

                    b.ToTable("SymbolProfiles", (string)null);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.Property<decimal>("AdjustedQuantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("AdjustedUnitPrice", "GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice.AdjustedUnitPrice#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("AdjustedUnitPrice");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice.AdjustedUnitPrice#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAdjustedUnitPrice");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UnitPrice", "GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice.UnitPrice#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("UnitPrice");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice.UnitPrice#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyUnitPrice");
                                });
                        });

                    b.HasDiscriminator().HasValue("ActivityWithQuantityAndUnitPrice");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.CashDepositWithdrawalActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "GhostfolioSidekick.Model.Activities.Types.CashDepositWithdrawalActivity.Amount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.CashDepositWithdrawalActivity.Amount#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");
                                });
                        });

                    b.HasDiscriminator().HasValue("CashDepositWithdrawalActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.DividendActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "GhostfolioSidekick.Model.Activities.Types.DividendActivity.Amount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.DividendActivity.Amount#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");
                                });
                        });

                    b.HasDiscriminator().HasValue("DividendActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.FeeActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "GhostfolioSidekick.Model.Activities.Types.FeeActivity.Amount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.FeeActivity.Amount#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");
                                });
                        });

                    b.HasDiscriminator().HasValue("FeeActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.GiftFiatActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "GhostfolioSidekick.Model.Activities.Types.GiftFiatActivity.Amount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.GiftFiatActivity.Amount#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");
                                });
                        });

                    b.HasDiscriminator().HasValue("GiftFiatActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.InterestActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "GhostfolioSidekick.Model.Activities.Types.InterestActivity.Amount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.InterestActivity.Amount#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");
                                });
                        });

                    b.HasDiscriminator().HasValue("InterestActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.KnownBalanceActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "GhostfolioSidekick.Model.Activities.Types.KnownBalanceActivity.Amount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Amount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.KnownBalanceActivity.Amount#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyAmount");
                                });
                        });

                    b.HasDiscriminator().HasValue("KnownBalanceActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.LiabilityActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "GhostfolioSidekick.Model.Activities.Types.LiabilityActivity.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Price");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.LiabilityActivity.Price#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyPrice");
                                });
                        });

                    b.HasDiscriminator().HasValue("LiabilityActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.RepayBondActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("TotalRepayAmount", "GhostfolioSidekick.Model.Activities.Types.RepayBondActivity.TotalRepayAmount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("TotalRepayAmount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.RepayBondActivity.TotalRepayAmount#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyTotalRepayAmount");
                                });
                        });

                    b.HasDiscriminator().HasValue("RepayBondActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.ValuableActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.Activity");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "GhostfolioSidekick.Model.Activities.Types.ValuableActivity.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("Price");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.ValuableActivity.Price#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyPrice");
                                });
                        });

                    b.HasDiscriminator().HasValue("ValuableActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.BuySellActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice");

                    b.ComplexProperty<Dictionary<string, object>>("TotalTransactionAmount", "GhostfolioSidekick.Model.Activities.Types.BuySellActivity.TotalTransactionAmount#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT")
                                .HasColumnName("TotalTransactionAmount");

                            b1.ComplexProperty<Dictionary<string, object>>("Currency", "GhostfolioSidekick.Model.Activities.Types.BuySellActivity.TotalTransactionAmount#Money.Currency#Currency", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Symbol")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("CurrencyTotalTransactionAmount");
                                });
                        });

                    b.HasDiscriminator().HasValue("BuySellActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.GiftAssetActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice");

                    b.HasDiscriminator().HasValue("GiftAssetActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.SendAndReceiveActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice");

                    b.HasDiscriminator().HasValue("SendAndReceiveActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.StakingRewardActivity", b =>
                {
                    b.HasBaseType("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice");

                    b.HasDiscriminator().HasValue("StakingRewardActivity");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.TypeConfigurations.PartialSymbolIdentifierActivity", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.DividendActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.LiabilityActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.RepayBondActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.ValuableActivity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GhostfolioSidekick.Model.Activities.PartialSymbolIdentifier", null)
                        .WithMany()
                        .HasForeignKey("PartialSymbolIdentifierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Account", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Accounts.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Balance", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Accounts.Account", null)
                        .WithMany("Balance")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Activity", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GhostfolioSidekick.Model.Holding", "Holding")
                        .WithMany("Activities")
                        .HasForeignKey("HoldingId");

                    b.Navigation("Account");

                    b.Navigation("Holding");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.CalculatedPriceTrace", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice", null)
                        .WithMany("AdjustedUnitPriceSource")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.BuySellActivityFee", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.BuySellActivity", null)
                        .WithMany("Fees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.BuySellActivityTax", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.BuySellActivity", null)
                        .WithMany("Taxes")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.DividendActivityFee", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.DividendActivity", null)
                        .WithMany("Fees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.DividendActivityTax", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.DividendActivity", null)
                        .WithMany("Taxes")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.MoneyLists.SendAndReceiveActivityFee", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Activities.Types.SendAndReceiveActivity", null)
                        .WithMany("Fees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.CurrencyExchangeRate", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Symbols.CurrencyExchangeProfile", null)
                        .WithMany("Rates")
                        .HasForeignKey("CurrencyExchangeProfileID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.MarketData", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Symbols.SymbolProfile", null)
                        .WithMany("MarketData")
                        .HasForeignKey("SymbolProfileSymbol", "SymbolProfileDataSource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Market.StockSplit", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Symbols.SymbolProfile", null)
                        .WithMany("StockSplits")
                        .HasForeignKey("SymbolProfileSymbol", "SymbolProfileDataSource")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Performance.CalculatedSnapshot", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Performance.HoldingAggregated", null)
                        .WithMany("CalculatedSnapshots")
                        .HasForeignKey("HoldingAggregatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Symbols.SymbolProfile", b =>
                {
                    b.HasOne("GhostfolioSidekick.Model.Holding", null)
                        .WithMany("SymbolProfiles")
                        .HasForeignKey("HoldingId");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Accounts.Account", b =>
                {
                    b.Navigation("Balance");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Holding", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("SymbolProfiles");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Performance.HoldingAggregated", b =>
                {
                    b.Navigation("CalculatedSnapshots");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Symbols.CurrencyExchangeProfile", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Symbols.SymbolProfile", b =>
                {
                    b.Navigation("MarketData");

                    b.Navigation("StockSplits");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.ActivityWithQuantityAndUnitPrice", b =>
                {
                    b.Navigation("AdjustedUnitPriceSource");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.DividendActivity", b =>
                {
                    b.Navigation("Fees");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.BuySellActivity", b =>
                {
                    b.Navigation("Fees");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("GhostfolioSidekick.Model.Activities.Types.SendAndReceiveActivity", b =>
                {
                    b.Navigation("Fees");
                });
#pragma warning restore 612, 618
        }
    }
}
