// <auto-generated />
using System;
using GhostfolioSidekick.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GhostfolioSidekick.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.StockSplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StockSplitListId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SymbolProfileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StockSplitListId");

                    b.HasIndex("SymbolProfileId", "Date")
                        .IsUnique();

                    b.ToTable("StockSplits");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.StockSplitList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SymbolProfileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SymbolProfileId")
                        .IsUnique();

                    b.ToTable("StockSplitLists");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.SymbolProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetClass")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssetSubClass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ISIN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Symbol")
                        .IsUnique();

                    b.ToTable("SymbolProfiles");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.StockSplit", b =>
                {
                    b.HasOne("GhostfolioSidekick.Database.Model.StockSplitList", null)
                        .WithMany("StockSplits")
                        .HasForeignKey("StockSplitListId");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.StockSplitList", b =>
                {
                    b.HasOne("GhostfolioSidekick.Database.Model.SymbolProfile", "SymbolProfile")
                        .WithOne("StockSplitList")
                        .HasForeignKey("GhostfolioSidekick.Database.Model.StockSplitList", "SymbolProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SymbolProfile");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.SymbolProfile", b =>
                {
                    b.HasOne("GhostfolioSidekick.Database.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.StockSplitList", b =>
                {
                    b.Navigation("StockSplits");
                });

            modelBuilder.Entity("GhostfolioSidekick.Database.Model.SymbolProfile", b =>
                {
                    b.Navigation("StockSplitList");
                });
#pragma warning restore 612, 618
        }
    }
}
